<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

	<bean id="templateResolver" class="org.thymeleaf.templateresolver.ServletContextTemplateResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".html" />
		<property name="templateMode" value="HTML5" />
		<property name="characterEncoding" value="UTF-8" />
		<!-- Template cache is set to false (default is true). production environment will set to true. -->
		<property name="cacheable" value="false" />
	</bean>
	<bean id="templateEngine" class="org.thymeleaf.spring4.SpringTemplateEngine">
		<property name="templateResolver" ref="templateResolver" />
		<property name="additionalDialects">
			<set>
				<bean class="org.thymeleaf.extras.springsecurity4.dialect.SpringSecurityDialect" />
			</set>
		</property>
	</bean>
	<!-- - The ContentNegotiatingViewResolver delegates to the InternalResourceViewResolver and BeanNameViewResolver, - and uses the requested media type (determined 
		by the path extension) to pick a matching view. - When the media type is 'text/html', it will delegate to the InternalResourceViewResolver's JstlView, - otherwise 
		to the BeanNameViewResolver. -->
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="contentNegotiationManager" ref="cnManager" />
		<property name="viewResolvers">
			<list>
				<!-- Used here for 'xml' and 'atom' views -->
				<bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
					<property name="order" value="1" />
				</bean>
				<bean class="org.thymeleaf.spring4.view.ThymeleafViewResolver">
					<property name="characterEncoding" value="UTF-8" />
					<property name="templateEngine" ref="templateEngine" />
					<property name="order" value="2" />
					<!-- We need to set exclusions because Content Negotiation tries to resolve from -->
					<!-- Thymeleaf even if a specific view bean (of a different class) is already -->
					<!-- found, which might cause exceptions (e.g. ThymeleafView does not have a -->
					<!-- 'marshaller' property). -->
					<property name="excludedViewNames" value="*.xml" />
				</bean>
			</list>
		</property>
	</bean>
	<!-- Simple strategy: only path extension is taken into account -->
	<bean id="cnManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="defaultContentType" value="text/html" />
		<property name="favorPathExtension" value="true" />
		<property name="ignoreAcceptHeader" value="true" />
		<property name="mediaTypes">
			<map>
				<entry key="html" value="text/html" />
				<entry key="xml" value="application/xml" />
				<entry key="atom" value="application/atom+xml" />
			</map>
		</property>
	</bean>

	<!-- - POJOs labeled with the @Controller and @Service annotations are auto-detected. -->
	<context:component-scan base-package="com.zhn.web" />

	<!-- Use spring servlet for all requests, including static resources -->
	<mvc:default-servlet-handler />

	<!-- Use @MVC annotations And Converters -->
	<mvc:annotation-driven>
		<mvc:message-converters>
			<ref bean="stringHttpMessageConverter" />
			<ref bean="marshallingHttpMessageConverter" />
			<ref bean="fastJsonHttpMessageConverter" />
		</mvc:message-converters>
	</mvc:annotation-driven>

	<bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
		<constructor-arg value="UTF-8" index="0" />
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain</value>
			</list>
		</property>
	</bean>

	<bean id="marshallingHttpMessageConverter" class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
		<property name="marshaller" ref="castorMarshaller" />
		<property name="unmarshaller" ref="castorMarshaller" />
		<property name="supportedMediaTypes">
			<list>
				<value>application/xml</value>
				<value>text/xml</value>
			</list>
		</property>
	</bean>

	<bean id="fastJsonHttpMessageConverter" class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>application/json</value>
				<value>application/xml</value>
				<value>text/html</value>
				<value>text/plain</value>
				<value>text/xml</value>
			</list>
		</property>
	</bean>

	<bean id="castorMarshaller" class="org.springframework.oxm.castor.CastorMarshaller" />

	<!-- all resources inside folder src/main/webapp/resources are mapped so they can be refered to inside JSP files -->
	<mvc:resources mapping="/resources/**" location="/resources/" />
	<!-- uses WebJars so Javascript and CSS libs can be declared as Maven dependencies (Bootstrap, jQuery...) -->
	<mvc:resources mapping="/web/**" location="classpath:/META-INF/resources/webjars/" />

	<mvc:view-controller path="/welcome" view-name="welcome" />
	<mvc:view-controller path="/deny" view-name="deny" />

	<!-- - Message source for this context, loaded from localized "messages_xx.properties" or "labels_xx.properties" files. - Files are stored inside classpath -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>labels</value>
				<value>messages</value>
			</list>
		</property>
	</bean>
	<!-- - This bean resolves specific types of exceptions to corresponding logical - view names for error views. -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<!-- view name resolved using bean of type InternalResourceViewResolver -->
		<property name="defaultErrorView" value="errors/exception" />
		<!-- results into 'WEB-INF/view/exception.html' -->
		<!-- <property name="warnLogCategory" value="warn" /> -->
		<!-- needed otherwise exceptions won't be logged anywhere -->
		<property name="defaultStatusCode" value="500"></property>
	</bean>

	<!-- File upload -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="200000" />
	</bean>
</beans>
